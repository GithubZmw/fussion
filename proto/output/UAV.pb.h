// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UAV.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UAV_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UAV_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UAV_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UAV_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UAV_2eproto;
namespace UAVproto {
class SignRequest;
struct SignRequestDefaultTypeInternal;
extern SignRequestDefaultTypeInternal _SignRequest_default_instance_;
class SignResponse;
struct SignResponseDefaultTypeInternal;
extern SignResponseDefaultTypeInternal _SignResponse_default_instance_;
}  // namespace UAVproto
PROTOBUF_NAMESPACE_OPEN
template<> ::UAVproto::SignRequest* Arena::CreateMaybeMessage<::UAVproto::SignRequest>(Arena*);
template<> ::UAVproto::SignResponse* Arena::CreateMaybeMessage<::UAVproto::SignResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UAVproto {

// ===================================================================

class SignRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAVproto.SignRequest) */ {
 public:
  inline SignRequest() : SignRequest(nullptr) {}
  ~SignRequest() override;
  explicit PROTOBUF_CONSTEXPR SignRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignRequest(const SignRequest& from);
  SignRequest(SignRequest&& from) noexcept
    : SignRequest() {
    *this = ::std::move(from);
  }

  inline SignRequest& operator=(const SignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignRequest& operator=(SignRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignRequest* internal_default_instance() {
    return reinterpret_cast<const SignRequest*>(
               &_SignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignRequest& a, SignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignRequest& from) {
    SignRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAVproto.SignRequest";
  }
  protected:
  explicit SignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 1,
    kTFieldNumber = 2,
  };
  // required bytes M = 1;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  const std::string& m() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m();
  PROTOBUF_NODISCARD std::string* release_m();
  void set_allocated_m(std::string* m);
  private:
  const std::string& _internal_m() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m(const std::string& value);
  std::string* _internal_mutable_m();
  public:

  // required int32 t = 2;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  int32_t t() const;
  void set_t(int32_t value);
  private:
  int32_t _internal_t() const;
  void _internal_set_t(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UAVproto.SignRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_;
    int32_t t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UAV_2eproto;
};
// -------------------------------------------------------------------

class SignResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UAVproto.SignResponse) */ {
 public:
  inline SignResponse() : SignResponse(nullptr) {}
  ~SignResponse() override;
  explicit PROTOBUF_CONSTEXPR SignResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignResponse(const SignResponse& from);
  SignResponse(SignResponse&& from) noexcept
    : SignResponse() {
    *this = ::std::move(from);
  }

  inline SignResponse& operator=(const SignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignResponse& operator=(SignResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignResponse* internal_default_instance() {
    return reinterpret_cast<const SignResponse*>(
               &_SignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignResponse& a, SignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignResponse& from) {
    SignResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UAVproto.SignResponse";
  }
  protected:
  explicit SignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCjFieldNumber = 1,
    kSigFieldNumber = 2,
    kIDFieldNumber = 3,
  };
  // required bytes cj = 1;
  bool has_cj() const;
  private:
  bool _internal_has_cj() const;
  public:
  void clear_cj();
  const std::string& cj() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cj(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cj();
  PROTOBUF_NODISCARD std::string* release_cj();
  void set_allocated_cj(std::string* cj);
  private:
  const std::string& _internal_cj() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cj(const std::string& value);
  std::string* _internal_mutable_cj();
  public:

  // required bytes sig = 2;
  bool has_sig() const;
  private:
  bool _internal_has_sig() const;
  public:
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // required bytes ID = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:UAVproto.SignResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cj_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UAV_2eproto;
};
// ===================================================================

class SignService_Stub;

class SignService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SignService() {};
 public:
  virtual ~SignService();

  typedef SignService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void sign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UAVproto::SignRequest* request,
                       ::UAVproto::SignResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SignService);
};

class SignService_Stub : public SignService {
 public:
  SignService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  SignService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~SignService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements SignService ------------------------------------------

  void sign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UAVproto::SignRequest* request,
                       ::UAVproto::SignResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SignService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignRequest

// required bytes M = 1;
inline bool SignRequest::_internal_has_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignRequest::has_m() const {
  return _internal_has_m();
}
inline void SignRequest::clear_m() {
  _impl_.m_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignRequest::m() const {
  // @@protoc_insertion_point(field_get:UAVproto.SignRequest.M)
  return _internal_m();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignRequest::set_m(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.m_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UAVproto.SignRequest.M)
}
inline std::string* SignRequest::mutable_m() {
  std::string* _s = _internal_mutable_m();
  // @@protoc_insertion_point(field_mutable:UAVproto.SignRequest.M)
  return _s;
}
inline const std::string& SignRequest::_internal_m() const {
  return _impl_.m_.Get();
}
inline void SignRequest::_internal_set_m(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.m_.Set(value, GetArenaForAllocation());
}
inline std::string* SignRequest::_internal_mutable_m() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.m_.Mutable(GetArenaForAllocation());
}
inline std::string* SignRequest::release_m() {
  // @@protoc_insertion_point(field_release:UAVproto.SignRequest.M)
  if (!_internal_has_m()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.m_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_.IsDefault()) {
    _impl_.m_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignRequest::set_allocated_m(std::string* m) {
  if (m != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.m_.SetAllocated(m, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_.IsDefault()) {
    _impl_.m_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UAVproto.SignRequest.M)
}

// required int32 t = 2;
inline bool SignRequest::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignRequest::has_t() const {
  return _internal_has_t();
}
inline void SignRequest::clear_t() {
  _impl_.t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SignRequest::_internal_t() const {
  return _impl_.t_;
}
inline int32_t SignRequest::t() const {
  // @@protoc_insertion_point(field_get:UAVproto.SignRequest.t)
  return _internal_t();
}
inline void SignRequest::_internal_set_t(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.t_ = value;
}
inline void SignRequest::set_t(int32_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:UAVproto.SignRequest.t)
}

// -------------------------------------------------------------------

// SignResponse

// required bytes cj = 1;
inline bool SignResponse::_internal_has_cj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignResponse::has_cj() const {
  return _internal_has_cj();
}
inline void SignResponse::clear_cj() {
  _impl_.cj_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignResponse::cj() const {
  // @@protoc_insertion_point(field_get:UAVproto.SignResponse.cj)
  return _internal_cj();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignResponse::set_cj(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cj_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UAVproto.SignResponse.cj)
}
inline std::string* SignResponse::mutable_cj() {
  std::string* _s = _internal_mutable_cj();
  // @@protoc_insertion_point(field_mutable:UAVproto.SignResponse.cj)
  return _s;
}
inline const std::string& SignResponse::_internal_cj() const {
  return _impl_.cj_.Get();
}
inline void SignResponse::_internal_set_cj(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cj_.Set(value, GetArenaForAllocation());
}
inline std::string* SignResponse::_internal_mutable_cj() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cj_.Mutable(GetArenaForAllocation());
}
inline std::string* SignResponse::release_cj() {
  // @@protoc_insertion_point(field_release:UAVproto.SignResponse.cj)
  if (!_internal_has_cj()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cj_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cj_.IsDefault()) {
    _impl_.cj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignResponse::set_allocated_cj(std::string* cj) {
  if (cj != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cj_.SetAllocated(cj, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cj_.IsDefault()) {
    _impl_.cj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UAVproto.SignResponse.cj)
}

// required bytes sig = 2;
inline bool SignResponse::_internal_has_sig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignResponse::has_sig() const {
  return _internal_has_sig();
}
inline void SignResponse::clear_sig() {
  _impl_.sig_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SignResponse::sig() const {
  // @@protoc_insertion_point(field_get:UAVproto.SignResponse.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignResponse::set_sig(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sig_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UAVproto.SignResponse.sig)
}
inline std::string* SignResponse::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:UAVproto.SignResponse.sig)
  return _s;
}
inline const std::string& SignResponse::_internal_sig() const {
  return _impl_.sig_.Get();
}
inline void SignResponse::_internal_set_sig(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sig_.Set(value, GetArenaForAllocation());
}
inline std::string* SignResponse::_internal_mutable_sig() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sig_.Mutable(GetArenaForAllocation());
}
inline std::string* SignResponse::release_sig() {
  // @@protoc_insertion_point(field_release:UAVproto.SignResponse.sig)
  if (!_internal_has_sig()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sig_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sig_.IsDefault()) {
    _impl_.sig_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignResponse::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sig_.SetAllocated(sig, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sig_.IsDefault()) {
    _impl_.sig_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UAVproto.SignResponse.sig)
}

// required bytes ID = 3;
inline bool SignResponse::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignResponse::has_id() const {
  return _internal_has_id();
}
inline void SignResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SignResponse::id() const {
  // @@protoc_insertion_point(field_get:UAVproto.SignResponse.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignResponse::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UAVproto.SignResponse.ID)
}
inline std::string* SignResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:UAVproto.SignResponse.ID)
  return _s;
}
inline const std::string& SignResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SignResponse::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignResponse::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SignResponse::release_id() {
  // @@protoc_insertion_point(field_release:UAVproto.SignResponse.ID)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UAVproto.SignResponse.ID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UAVproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UAV_2eproto

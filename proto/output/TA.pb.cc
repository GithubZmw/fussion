// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TA.proto

#include "TA.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TAproto {
PROTOBUF_CONSTEXPR UAVIDRequest::UAVIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uav_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UAVIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAVIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAVIDRequestDefaultTypeInternal() {}
  union {
    UAVIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAVIDRequestDefaultTypeInternal _UAVIDRequest_default_instance_;
PROTOBUF_CONSTEXPR Parameters::Parameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.q_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.g_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.beta_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.n_)*/0
  , /*decltype(_impl_.tm_)*/0} {}
struct ParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParametersDefaultTypeInternal() {}
  union {
    Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParametersDefaultTypeInternal _Parameters_default_instance_;
PROTOBUF_CONSTEXPR UAVIDResponse::UAVIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cj_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sj_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.m_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.t_)*/0} {}
struct UAVIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAVIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAVIDResponseDefaultTypeInternal() {}
  union {
    UAVIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAVIDResponseDefaultTypeInternal _UAVIDResponse_default_instance_;
}  // namespace TAproto
static ::_pb::Metadata file_level_metadata_TA_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TA_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_TA_2eproto[1];

const uint32_t TableStruct_TA_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDRequest, _impl_.uav_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.tm_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.q_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.p2_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::TAproto::Parameters, _impl_.pk_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_.cj_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_.sj_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::TAproto::UAVIDResponse, _impl_.t_),
  3,
  0,
  1,
  2,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::TAproto::UAVIDRequest)},
  { 8, 21, -1, sizeof(::TAproto::Parameters)},
  { 28, 39, -1, sizeof(::TAproto::UAVIDResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TAproto::_UAVIDRequest_default_instance_._instance,
  &::TAproto::_Parameters_default_instance_._instance,
  &::TAproto::_UAVIDResponse_default_instance_._instance,
};

const char descriptor_table_protodef_TA_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010TA.proto\022\007TAproto\"\036\n\014UAVIDRequest\022\016\n\006u"
  "av_id\030\001 \002(\014\"_\n\nParameters\022\t\n\001n\030\001 \001(\005\022\n\n\002"
  "tm\030\002 \001(\005\022\t\n\001q\030\003 \001(\014\022\n\n\002P2\030\004 \001(\014\022\t\n\001g\030\005 \001"
  "(\014\022\014\n\004beta\030\006 \001(\014\022\n\n\002PK\030\007 \001(\014\"b\n\rUAVIDRes"
  "ponse\022#\n\006params\030\001 \001(\0132\023.TAproto.Paramete"
  "rs\022\n\n\002cj\030\002 \001(\014\022\n\n\002sj\030\003 \001(\014\022\t\n\001M\030\004 \001(\014\022\t\n"
  "\001t\030\005 \001(\0052L\n\017RegisterService\0229\n\010Register\022"
  "\025.TAproto.UAVIDRequest\032\026.TAproto.UAVIDRe"
  "sponseB\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_TA_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TA_2eproto = {
    false, false, 331, descriptor_table_protodef_TA_2eproto,
    "TA.proto",
    &descriptor_table_TA_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_TA_2eproto::offsets,
    file_level_metadata_TA_2eproto, file_level_enum_descriptors_TA_2eproto,
    file_level_service_descriptors_TA_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TA_2eproto_getter() {
  return &descriptor_table_TA_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TA_2eproto(&descriptor_table_TA_2eproto);
namespace TAproto {

// ===================================================================

class UAVIDRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UAVIDRequest>()._impl_._has_bits_);
  static void set_has_uav_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UAVIDRequest::UAVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TAproto.UAVIDRequest)
}
UAVIDRequest::UAVIDRequest(const UAVIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UAVIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uav_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uav_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uav_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uav_id()) {
    _this->_impl_.uav_id_.Set(from._internal_uav_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TAproto.UAVIDRequest)
}

inline void UAVIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uav_id_){}
  };
  _impl_.uav_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uav_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UAVIDRequest::~UAVIDRequest() {
  // @@protoc_insertion_point(destructor:TAproto.UAVIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAVIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uav_id_.Destroy();
}

void UAVIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UAVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TAproto.UAVIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uav_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAVIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes uav_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uav_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAVIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TAproto.UAVIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes uav_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uav_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TAproto.UAVIDRequest)
  return target;
}

size_t UAVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TAproto.UAVIDRequest)
  size_t total_size = 0;

  // required bytes uav_id = 1;
  if (_internal_has_uav_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uav_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAVIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UAVIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAVIDRequest::GetClassData() const { return &_class_data_; }


void UAVIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UAVIDRequest*>(&to_msg);
  auto& from = static_cast<const UAVIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TAproto.UAVIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uav_id()) {
    _this->_internal_set_uav_id(from._internal_uav_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAVIDRequest::CopyFrom(const UAVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TAproto.UAVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVIDRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UAVIDRequest::InternalSwap(UAVIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uav_id_, lhs_arena,
      &other->_impl_.uav_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TA_2eproto_getter, &descriptor_table_TA_2eproto_once,
      file_level_metadata_TA_2eproto[0]);
}

// ===================================================================

class Parameters::_Internal {
 public:
  using HasBits = decltype(std::declval<Parameters>()._impl_._has_bits_);
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_q(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pk(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Parameters::Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TAproto.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Parameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.q_){}
    , decltype(_impl_.p2_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.pk_){}
    , decltype(_impl_.n_){}
    , decltype(_impl_.tm_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.q_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.q_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_q()) {
    _this->_impl_.q_.Set(from._internal_q(), 
      _this->GetArenaForAllocation());
  }
  _impl_.p2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_p2()) {
    _this->_impl_.p2_.Set(from._internal_p2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.g_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_g()) {
    _this->_impl_.g_.Set(from._internal_g(), 
      _this->GetArenaForAllocation());
  }
  _impl_.beta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.beta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_beta()) {
    _this->_impl_.beta_.Set(from._internal_beta(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pk()) {
    _this->_impl_.pk_.Set(from._internal_pk(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.n_, &from._impl_.n_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tm_) -
    reinterpret_cast<char*>(&_impl_.n_)) + sizeof(_impl_.tm_));
  // @@protoc_insertion_point(copy_constructor:TAproto.Parameters)
}

inline void Parameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.q_){}
    , decltype(_impl_.p2_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.beta_){}
    , decltype(_impl_.pk_){}
    , decltype(_impl_.n_){0}
    , decltype(_impl_.tm_){0}
  };
  _impl_.q_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.q_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.p2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.p2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.g_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.beta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.beta_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:TAproto.Parameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.q_.Destroy();
  _impl_.p2_.Destroy();
  _impl_.g_.Destroy();
  _impl_.beta_.Destroy();
  _impl_.pk_.Destroy();
}

void Parameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:TAproto.Parameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.q_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.p2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.g_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.beta_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.pk_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.n_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tm_) -
        reinterpret_cast<char*>(&_impl_.n_)) + sizeof(_impl_.tm_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_n(&has_bits);
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tm(&has_bits);
          _impl_.tm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes q = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_q();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes P2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_p2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_g();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes beta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_beta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes PK = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Parameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TAproto.Parameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 n = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_n(), target);
  }

  // optional int32 tm = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tm(), target);
  }

  // optional bytes q = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_q(), target);
  }

  // optional bytes P2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_p2(), target);
  }

  // optional bytes g = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_g(), target);
  }

  // optional bytes beta = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_beta(), target);
  }

  // optional bytes PK = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_pk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TAproto.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TAproto.Parameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes q = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_q());
    }

    // optional bytes P2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_p2());
    }

    // optional bytes g = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_g());
    }

    // optional bytes beta = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_beta());
    }

    // optional bytes PK = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pk());
    }

    // optional int32 n = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
    }

    // optional int32 tm = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tm());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameters::GetClassData() const { return &_class_data_; }


void Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Parameters*>(&to_msg);
  auto& from = static_cast<const Parameters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TAproto.Parameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_q(from._internal_q());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_p2(from._internal_p2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_g(from._internal_g());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_beta(from._internal_beta());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_pk(from._internal_pk());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.n_ = from._impl_.n_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tm_ = from._impl_.tm_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TAproto.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.q_, lhs_arena,
      &other->_impl_.q_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.p2_, lhs_arena,
      &other->_impl_.p2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.g_, lhs_arena,
      &other->_impl_.g_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.beta_, lhs_arena,
      &other->_impl_.beta_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pk_, lhs_arena,
      &other->_impl_.pk_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameters, _impl_.tm_)
      + sizeof(Parameters::_impl_.tm_)
      - PROTOBUF_FIELD_OFFSET(Parameters, _impl_.n_)>(
          reinterpret_cast<char*>(&_impl_.n_),
          reinterpret_cast<char*>(&other->_impl_.n_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TA_2eproto_getter, &descriptor_table_TA_2eproto_once,
      file_level_metadata_TA_2eproto[1]);
}

// ===================================================================

class UAVIDResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UAVIDResponse>()._impl_._has_bits_);
  static const ::TAproto::Parameters& params(const UAVIDResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sj(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TAproto::Parameters&
UAVIDResponse::_Internal::params(const UAVIDResponse* msg) {
  return *msg->_impl_.params_;
}
UAVIDResponse::UAVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TAproto.UAVIDResponse)
}
UAVIDResponse::UAVIDResponse(const UAVIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UAVIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cj_){}
    , decltype(_impl_.sj_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.t_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cj()) {
    _this->_impl_.cj_.Set(from._internal_cj(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sj()) {
    _this->_impl_.sj_.Set(from._internal_sj(), 
      _this->GetArenaForAllocation());
  }
  _impl_.m_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m()) {
    _this->_impl_.m_.Set(from._internal_m(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_params()) {
    _this->_impl_.params_ = new ::TAproto::Parameters(*from._impl_.params_);
  }
  _this->_impl_.t_ = from._impl_.t_;
  // @@protoc_insertion_point(copy_constructor:TAproto.UAVIDResponse)
}

inline void UAVIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cj_){}
    , decltype(_impl_.sj_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.t_){0}
  };
  _impl_.cj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.m_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UAVIDResponse::~UAVIDResponse() {
  // @@protoc_insertion_point(destructor:TAproto.UAVIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAVIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cj_.Destroy();
  _impl_.sj_.Destroy();
  _impl_.m_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void UAVIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UAVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TAproto.UAVIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cj_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sj_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.m_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
  }
  _impl_.t_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAVIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TAproto.Parameters params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cj();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sj();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes M = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_m();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 t = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAVIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TAproto.UAVIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TAproto.Parameters params = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // optional bytes cj = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_cj(), target);
  }

  // optional bytes sj = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sj(), target);
  }

  // optional bytes M = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_m(), target);
  }

  // optional int32 t = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TAproto.UAVIDResponse)
  return target;
}

size_t UAVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TAproto.UAVIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes cj = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cj());
    }

    // optional bytes sj = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sj());
    }

    // optional bytes M = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_m());
    }

    // optional .TAproto.Parameters params = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

    // optional int32 t = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAVIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UAVIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAVIDResponse::GetClassData() const { return &_class_data_; }


void UAVIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UAVIDResponse*>(&to_msg);
  auto& from = static_cast<const UAVIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TAproto.UAVIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cj(from._internal_cj());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sj(from._internal_sj());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_m(from._internal_m());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_params()->::TAproto::Parameters::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.t_ = from._impl_.t_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAVIDResponse::CopyFrom(const UAVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TAproto.UAVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVIDResponse::IsInitialized() const {
  return true;
}

void UAVIDResponse::InternalSwap(UAVIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cj_, lhs_arena,
      &other->_impl_.cj_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sj_, lhs_arena,
      &other->_impl_.sj_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_, lhs_arena,
      &other->_impl_.m_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAVIDResponse, _impl_.t_)
      + sizeof(UAVIDResponse::_impl_.t_)
      - PROTOBUF_FIELD_OFFSET(UAVIDResponse, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TA_2eproto_getter, &descriptor_table_TA_2eproto_once,
      file_level_metadata_TA_2eproto[2]);
}

// ===================================================================

RegisterService::~RegisterService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RegisterService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TA_2eproto);
  return file_level_service_descriptors_TA_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RegisterService::GetDescriptor() {
  return descriptor();
}

void RegisterService::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::TAproto::UAVIDRequest*,
                         ::TAproto::UAVIDResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Register() not implemented.");
  done->Run();
}

void RegisterService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_TA_2eproto[0]);
  switch(method->index()) {
    case 0:
      Register(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::TAproto::UAVIDRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::TAproto::UAVIDResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RegisterService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::TAproto::UAVIDRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RegisterService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::TAproto::UAVIDResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RegisterService_Stub::RegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RegisterService_Stub::RegisterService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RegisterService_Stub::~RegisterService_Stub() {
  if (owns_channel_) delete channel_;
}

void RegisterService_Stub::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::TAproto::UAVIDRequest* request,
                              ::TAproto::UAVIDResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TAproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TAproto::UAVIDRequest*
Arena::CreateMaybeMessage< ::TAproto::UAVIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TAproto::UAVIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::TAproto::Parameters*
Arena::CreateMaybeMessage< ::TAproto::Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TAproto::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::TAproto::UAVIDResponse*
Arena::CreateMaybeMessage< ::TAproto::UAVIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TAproto::UAVIDResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TA.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TA_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TA_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TA_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TA_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TA_2eproto;
namespace TAproto {
class Parameters;
struct ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class UAVIDRequest;
struct UAVIDRequestDefaultTypeInternal;
extern UAVIDRequestDefaultTypeInternal _UAVIDRequest_default_instance_;
class UAVIDResponse;
struct UAVIDResponseDefaultTypeInternal;
extern UAVIDResponseDefaultTypeInternal _UAVIDResponse_default_instance_;
}  // namespace TAproto
PROTOBUF_NAMESPACE_OPEN
template<> ::TAproto::Parameters* Arena::CreateMaybeMessage<::TAproto::Parameters>(Arena*);
template<> ::TAproto::UAVIDRequest* Arena::CreateMaybeMessage<::TAproto::UAVIDRequest>(Arena*);
template<> ::TAproto::UAVIDResponse* Arena::CreateMaybeMessage<::TAproto::UAVIDResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TAproto {

// ===================================================================

class UAVIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TAproto.UAVIDRequest) */ {
 public:
  inline UAVIDRequest() : UAVIDRequest(nullptr) {}
  ~UAVIDRequest() override;
  explicit PROTOBUF_CONSTEXPR UAVIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAVIDRequest(const UAVIDRequest& from);
  UAVIDRequest(UAVIDRequest&& from) noexcept
    : UAVIDRequest() {
    *this = ::std::move(from);
  }

  inline UAVIDRequest& operator=(const UAVIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVIDRequest& operator=(UAVIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAVIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAVIDRequest* internal_default_instance() {
    return reinterpret_cast<const UAVIDRequest*>(
               &_UAVIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UAVIDRequest& a, UAVIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAVIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAVIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAVIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAVIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UAVIDRequest& from) {
    UAVIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TAproto.UAVIDRequest";
  }
  protected:
  explicit UAVIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUavIdFieldNumber = 1,
  };
  // required bytes uav_id = 1;
  bool has_uav_id() const;
  private:
  bool _internal_has_uav_id() const;
  public:
  void clear_uav_id();
  const std::string& uav_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uav_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uav_id();
  PROTOBUF_NODISCARD std::string* release_uav_id();
  void set_allocated_uav_id(std::string* uav_id);
  private:
  const std::string& _internal_uav_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uav_id(const std::string& value);
  std::string* _internal_mutable_uav_id();
  public:

  // @@protoc_insertion_point(class_scope:TAproto.UAVIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uav_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TA_2eproto;
};
// -------------------------------------------------------------------

class Parameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TAproto.Parameters) */ {
 public:
  inline Parameters() : Parameters(nullptr) {}
  ~Parameters() override;
  explicit PROTOBUF_CONSTEXPR Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameters(const Parameters& from);
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameters& operator=(Parameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Parameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Parameters& from) {
    Parameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TAproto.Parameters";
  }
  protected:
  explicit Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQFieldNumber = 3,
    kP2FieldNumber = 4,
    kGFieldNumber = 5,
    kBetaFieldNumber = 6,
    kPKFieldNumber = 7,
    kNFieldNumber = 1,
    kTmFieldNumber = 2,
  };
  // optional bytes q = 3;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const std::string& q() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_q(ArgT0&& arg0, ArgT... args);
  std::string* mutable_q();
  PROTOBUF_NODISCARD std::string* release_q();
  void set_allocated_q(std::string* q);
  private:
  const std::string& _internal_q() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // optional bytes P2 = 4;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  const std::string& p2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_p2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_p2();
  PROTOBUF_NODISCARD std::string* release_p2();
  void set_allocated_p2(std::string* p2);
  private:
  const std::string& _internal_p2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_p2(const std::string& value);
  std::string* _internal_mutable_p2();
  public:

  // optional bytes g = 5;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  const std::string& g() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_g(ArgT0&& arg0, ArgT... args);
  std::string* mutable_g();
  PROTOBUF_NODISCARD std::string* release_g();
  void set_allocated_g(std::string* g);
  private:
  const std::string& _internal_g() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_g(const std::string& value);
  std::string* _internal_mutable_g();
  public:

  // optional bytes beta = 6;
  bool has_beta() const;
  private:
  bool _internal_has_beta() const;
  public:
  void clear_beta();
  const std::string& beta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_beta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_beta();
  PROTOBUF_NODISCARD std::string* release_beta();
  void set_allocated_beta(std::string* beta);
  private:
  const std::string& _internal_beta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_beta(const std::string& value);
  std::string* _internal_mutable_beta();
  public:

  // optional bytes PK = 7;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const std::string& pk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pk();
  PROTOBUF_NODISCARD std::string* release_pk();
  void set_allocated_pk(std::string* pk);
  private:
  const std::string& _internal_pk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pk(const std::string& value);
  std::string* _internal_mutable_pk();
  public:

  // optional int32 n = 1;
  bool has_n() const;
  private:
  bool _internal_has_n() const;
  public:
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // optional int32 tm = 2;
  bool has_tm() const;
  private:
  bool _internal_has_tm() const;
  public:
  void clear_tm();
  int32_t tm() const;
  void set_tm(int32_t value);
  private:
  int32_t _internal_tm() const;
  void _internal_set_tm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TAproto.Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr beta_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
    int32_t n_;
    int32_t tm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TA_2eproto;
};
// -------------------------------------------------------------------

class UAVIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TAproto.UAVIDResponse) */ {
 public:
  inline UAVIDResponse() : UAVIDResponse(nullptr) {}
  ~UAVIDResponse() override;
  explicit PROTOBUF_CONSTEXPR UAVIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAVIDResponse(const UAVIDResponse& from);
  UAVIDResponse(UAVIDResponse&& from) noexcept
    : UAVIDResponse() {
    *this = ::std::move(from);
  }

  inline UAVIDResponse& operator=(const UAVIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVIDResponse& operator=(UAVIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAVIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UAVIDResponse* internal_default_instance() {
    return reinterpret_cast<const UAVIDResponse*>(
               &_UAVIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UAVIDResponse& a, UAVIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAVIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAVIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAVIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAVIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UAVIDResponse& from) {
    UAVIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TAproto.UAVIDResponse";
  }
  protected:
  explicit UAVIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCjFieldNumber = 2,
    kSjFieldNumber = 3,
    kMFieldNumber = 4,
    kParamsFieldNumber = 1,
    kTFieldNumber = 5,
  };
  // optional bytes cj = 2;
  bool has_cj() const;
  private:
  bool _internal_has_cj() const;
  public:
  void clear_cj();
  const std::string& cj() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cj(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cj();
  PROTOBUF_NODISCARD std::string* release_cj();
  void set_allocated_cj(std::string* cj);
  private:
  const std::string& _internal_cj() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cj(const std::string& value);
  std::string* _internal_mutable_cj();
  public:

  // optional bytes sj = 3;
  bool has_sj() const;
  private:
  bool _internal_has_sj() const;
  public:
  void clear_sj();
  const std::string& sj() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sj(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sj();
  PROTOBUF_NODISCARD std::string* release_sj();
  void set_allocated_sj(std::string* sj);
  private:
  const std::string& _internal_sj() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sj(const std::string& value);
  std::string* _internal_mutable_sj();
  public:

  // optional bytes M = 4;
  bool has_m() const;
  private:
  bool _internal_has_m() const;
  public:
  void clear_m();
  const std::string& m() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_m(ArgT0&& arg0, ArgT... args);
  std::string* mutable_m();
  PROTOBUF_NODISCARD std::string* release_m();
  void set_allocated_m(std::string* m);
  private:
  const std::string& _internal_m() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_m(const std::string& value);
  std::string* _internal_mutable_m();
  public:

  // optional .TAproto.Parameters params = 1;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::TAproto::Parameters& params() const;
  PROTOBUF_NODISCARD ::TAproto::Parameters* release_params();
  ::TAproto::Parameters* mutable_params();
  void set_allocated_params(::TAproto::Parameters* params);
  private:
  const ::TAproto::Parameters& _internal_params() const;
  ::TAproto::Parameters* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::TAproto::Parameters* params);
  ::TAproto::Parameters* unsafe_arena_release_params();

  // optional int32 t = 5;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  int32_t t() const;
  void set_t(int32_t value);
  private:
  int32_t _internal_t() const;
  void _internal_set_t(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TAproto.UAVIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cj_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sj_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_;
    ::TAproto::Parameters* params_;
    int32_t t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TA_2eproto;
};
// ===================================================================

class RegisterService_Stub;

class RegisterService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RegisterService() {};
 public:
  virtual ~RegisterService();

  typedef RegisterService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::TAproto::UAVIDRequest* request,
                       ::TAproto::UAVIDResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RegisterService);
};

class RegisterService_Stub : public RegisterService {
 public:
  RegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RegisterService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RegisterService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RegisterService ------------------------------------------

  void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::TAproto::UAVIDRequest* request,
                       ::TAproto::UAVIDResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RegisterService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UAVIDRequest

// required bytes uav_id = 1;
inline bool UAVIDRequest::_internal_has_uav_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAVIDRequest::has_uav_id() const {
  return _internal_has_uav_id();
}
inline void UAVIDRequest::clear_uav_id() {
  _impl_.uav_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UAVIDRequest::uav_id() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDRequest.uav_id)
  return _internal_uav_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UAVIDRequest::set_uav_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uav_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.UAVIDRequest.uav_id)
}
inline std::string* UAVIDRequest::mutable_uav_id() {
  std::string* _s = _internal_mutable_uav_id();
  // @@protoc_insertion_point(field_mutable:TAproto.UAVIDRequest.uav_id)
  return _s;
}
inline const std::string& UAVIDRequest::_internal_uav_id() const {
  return _impl_.uav_id_.Get();
}
inline void UAVIDRequest::_internal_set_uav_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uav_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UAVIDRequest::_internal_mutable_uav_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uav_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UAVIDRequest::release_uav_id() {
  // @@protoc_insertion_point(field_release:TAproto.UAVIDRequest.uav_id)
  if (!_internal_has_uav_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uav_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uav_id_.IsDefault()) {
    _impl_.uav_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UAVIDRequest::set_allocated_uav_id(std::string* uav_id) {
  if (uav_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uav_id_.SetAllocated(uav_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uav_id_.IsDefault()) {
    _impl_.uav_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.UAVIDRequest.uav_id)
}

// -------------------------------------------------------------------

// Parameters

// optional int32 n = 1;
inline bool Parameters::_internal_has_n() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Parameters::has_n() const {
  return _internal_has_n();
}
inline void Parameters::clear_n() {
  _impl_.n_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t Parameters::_internal_n() const {
  return _impl_.n_;
}
inline int32_t Parameters::n() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.n)
  return _internal_n();
}
inline void Parameters::_internal_set_n(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.n_ = value;
}
inline void Parameters::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:TAproto.Parameters.n)
}

// optional int32 tm = 2;
inline bool Parameters::_internal_has_tm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Parameters::has_tm() const {
  return _internal_has_tm();
}
inline void Parameters::clear_tm() {
  _impl_.tm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Parameters::_internal_tm() const {
  return _impl_.tm_;
}
inline int32_t Parameters::tm() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.tm)
  return _internal_tm();
}
inline void Parameters::_internal_set_tm(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.tm_ = value;
}
inline void Parameters::set_tm(int32_t value) {
  _internal_set_tm(value);
  // @@protoc_insertion_point(field_set:TAproto.Parameters.tm)
}

// optional bytes q = 3;
inline bool Parameters::_internal_has_q() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Parameters::has_q() const {
  return _internal_has_q();
}
inline void Parameters::clear_q() {
  _impl_.q_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Parameters::q() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.q)
  return _internal_q();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameters::set_q(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.q_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.Parameters.q)
}
inline std::string* Parameters::mutable_q() {
  std::string* _s = _internal_mutable_q();
  // @@protoc_insertion_point(field_mutable:TAproto.Parameters.q)
  return _s;
}
inline const std::string& Parameters::_internal_q() const {
  return _impl_.q_.Get();
}
inline void Parameters::_internal_set_q(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.q_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameters::_internal_mutable_q() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.q_.Mutable(GetArenaForAllocation());
}
inline std::string* Parameters::release_q() {
  // @@protoc_insertion_point(field_release:TAproto.Parameters.q)
  if (!_internal_has_q()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.q_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.q_.IsDefault()) {
    _impl_.q_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Parameters::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.q_.SetAllocated(q, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.q_.IsDefault()) {
    _impl_.q_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.Parameters.q)
}

// optional bytes P2 = 4;
inline bool Parameters::_internal_has_p2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Parameters::has_p2() const {
  return _internal_has_p2();
}
inline void Parameters::clear_p2() {
  _impl_.p2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Parameters::p2() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.P2)
  return _internal_p2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameters::set_p2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.p2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.Parameters.P2)
}
inline std::string* Parameters::mutable_p2() {
  std::string* _s = _internal_mutable_p2();
  // @@protoc_insertion_point(field_mutable:TAproto.Parameters.P2)
  return _s;
}
inline const std::string& Parameters::_internal_p2() const {
  return _impl_.p2_.Get();
}
inline void Parameters::_internal_set_p2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.p2_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameters::_internal_mutable_p2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.p2_.Mutable(GetArenaForAllocation());
}
inline std::string* Parameters::release_p2() {
  // @@protoc_insertion_point(field_release:TAproto.Parameters.P2)
  if (!_internal_has_p2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.p2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.p2_.IsDefault()) {
    _impl_.p2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Parameters::set_allocated_p2(std::string* p2) {
  if (p2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.p2_.SetAllocated(p2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.p2_.IsDefault()) {
    _impl_.p2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.Parameters.P2)
}

// optional bytes g = 5;
inline bool Parameters::_internal_has_g() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Parameters::has_g() const {
  return _internal_has_g();
}
inline void Parameters::clear_g() {
  _impl_.g_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Parameters::g() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.g)
  return _internal_g();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameters::set_g(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.g_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.Parameters.g)
}
inline std::string* Parameters::mutable_g() {
  std::string* _s = _internal_mutable_g();
  // @@protoc_insertion_point(field_mutable:TAproto.Parameters.g)
  return _s;
}
inline const std::string& Parameters::_internal_g() const {
  return _impl_.g_.Get();
}
inline void Parameters::_internal_set_g(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.g_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameters::_internal_mutable_g() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.g_.Mutable(GetArenaForAllocation());
}
inline std::string* Parameters::release_g() {
  // @@protoc_insertion_point(field_release:TAproto.Parameters.g)
  if (!_internal_has_g()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.g_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.g_.IsDefault()) {
    _impl_.g_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Parameters::set_allocated_g(std::string* g) {
  if (g != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.g_.SetAllocated(g, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.g_.IsDefault()) {
    _impl_.g_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.Parameters.g)
}

// optional bytes beta = 6;
inline bool Parameters::_internal_has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Parameters::has_beta() const {
  return _internal_has_beta();
}
inline void Parameters::clear_beta() {
  _impl_.beta_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Parameters::beta() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.beta)
  return _internal_beta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameters::set_beta(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.beta_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.Parameters.beta)
}
inline std::string* Parameters::mutable_beta() {
  std::string* _s = _internal_mutable_beta();
  // @@protoc_insertion_point(field_mutable:TAproto.Parameters.beta)
  return _s;
}
inline const std::string& Parameters::_internal_beta() const {
  return _impl_.beta_.Get();
}
inline void Parameters::_internal_set_beta(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.beta_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameters::_internal_mutable_beta() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.beta_.Mutable(GetArenaForAllocation());
}
inline std::string* Parameters::release_beta() {
  // @@protoc_insertion_point(field_release:TAproto.Parameters.beta)
  if (!_internal_has_beta()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.beta_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.beta_.IsDefault()) {
    _impl_.beta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Parameters::set_allocated_beta(std::string* beta) {
  if (beta != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.beta_.SetAllocated(beta, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.beta_.IsDefault()) {
    _impl_.beta_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.Parameters.beta)
}

// optional bytes PK = 7;
inline bool Parameters::_internal_has_pk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Parameters::has_pk() const {
  return _internal_has_pk();
}
inline void Parameters::clear_pk() {
  _impl_.pk_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Parameters::pk() const {
  // @@protoc_insertion_point(field_get:TAproto.Parameters.PK)
  return _internal_pk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Parameters::set_pk(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.pk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.Parameters.PK)
}
inline std::string* Parameters::mutable_pk() {
  std::string* _s = _internal_mutable_pk();
  // @@protoc_insertion_point(field_mutable:TAproto.Parameters.PK)
  return _s;
}
inline const std::string& Parameters::_internal_pk() const {
  return _impl_.pk_.Get();
}
inline void Parameters::_internal_set_pk(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pk_.Set(value, GetArenaForAllocation());
}
inline std::string* Parameters::_internal_mutable_pk() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.pk_.Mutable(GetArenaForAllocation());
}
inline std::string* Parameters::release_pk() {
  // @@protoc_insertion_point(field_release:TAproto.Parameters.PK)
  if (!_internal_has_pk()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.pk_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_.IsDefault()) {
    _impl_.pk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Parameters::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.pk_.SetAllocated(pk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_.IsDefault()) {
    _impl_.pk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.Parameters.PK)
}

// -------------------------------------------------------------------

// UAVIDResponse

// optional .TAproto.Parameters params = 1;
inline bool UAVIDResponse::_internal_has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline bool UAVIDResponse::has_params() const {
  return _internal_has_params();
}
inline void UAVIDResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TAproto::Parameters& UAVIDResponse::_internal_params() const {
  const ::TAproto::Parameters* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::TAproto::Parameters&>(
      ::TAproto::_Parameters_default_instance_);
}
inline const ::TAproto::Parameters& UAVIDResponse::params() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDResponse.params)
  return _internal_params();
}
inline void UAVIDResponse::unsafe_arena_set_allocated_params(
    ::TAproto::Parameters* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TAproto.UAVIDResponse.params)
}
inline ::TAproto::Parameters* UAVIDResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TAproto::Parameters* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TAproto::Parameters* UAVIDResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:TAproto.UAVIDResponse.params)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TAproto::Parameters* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::TAproto::Parameters* UAVIDResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::TAproto::Parameters>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::TAproto::Parameters* UAVIDResponse::mutable_params() {
  ::TAproto::Parameters* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:TAproto.UAVIDResponse.params)
  return _msg;
}
inline void UAVIDResponse::set_allocated_params(::TAproto::Parameters* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:TAproto.UAVIDResponse.params)
}

// optional bytes cj = 2;
inline bool UAVIDResponse::_internal_has_cj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UAVIDResponse::has_cj() const {
  return _internal_has_cj();
}
inline void UAVIDResponse::clear_cj() {
  _impl_.cj_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UAVIDResponse::cj() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDResponse.cj)
  return _internal_cj();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UAVIDResponse::set_cj(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cj_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.UAVIDResponse.cj)
}
inline std::string* UAVIDResponse::mutable_cj() {
  std::string* _s = _internal_mutable_cj();
  // @@protoc_insertion_point(field_mutable:TAproto.UAVIDResponse.cj)
  return _s;
}
inline const std::string& UAVIDResponse::_internal_cj() const {
  return _impl_.cj_.Get();
}
inline void UAVIDResponse::_internal_set_cj(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cj_.Set(value, GetArenaForAllocation());
}
inline std::string* UAVIDResponse::_internal_mutable_cj() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cj_.Mutable(GetArenaForAllocation());
}
inline std::string* UAVIDResponse::release_cj() {
  // @@protoc_insertion_point(field_release:TAproto.UAVIDResponse.cj)
  if (!_internal_has_cj()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cj_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cj_.IsDefault()) {
    _impl_.cj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UAVIDResponse::set_allocated_cj(std::string* cj) {
  if (cj != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cj_.SetAllocated(cj, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cj_.IsDefault()) {
    _impl_.cj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.UAVIDResponse.cj)
}

// optional bytes sj = 3;
inline bool UAVIDResponse::_internal_has_sj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UAVIDResponse::has_sj() const {
  return _internal_has_sj();
}
inline void UAVIDResponse::clear_sj() {
  _impl_.sj_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UAVIDResponse::sj() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDResponse.sj)
  return _internal_sj();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UAVIDResponse::set_sj(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sj_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.UAVIDResponse.sj)
}
inline std::string* UAVIDResponse::mutable_sj() {
  std::string* _s = _internal_mutable_sj();
  // @@protoc_insertion_point(field_mutable:TAproto.UAVIDResponse.sj)
  return _s;
}
inline const std::string& UAVIDResponse::_internal_sj() const {
  return _impl_.sj_.Get();
}
inline void UAVIDResponse::_internal_set_sj(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sj_.Set(value, GetArenaForAllocation());
}
inline std::string* UAVIDResponse::_internal_mutable_sj() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sj_.Mutable(GetArenaForAllocation());
}
inline std::string* UAVIDResponse::release_sj() {
  // @@protoc_insertion_point(field_release:TAproto.UAVIDResponse.sj)
  if (!_internal_has_sj()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sj_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sj_.IsDefault()) {
    _impl_.sj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UAVIDResponse::set_allocated_sj(std::string* sj) {
  if (sj != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sj_.SetAllocated(sj, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sj_.IsDefault()) {
    _impl_.sj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.UAVIDResponse.sj)
}

// optional bytes M = 4;
inline bool UAVIDResponse::_internal_has_m() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UAVIDResponse::has_m() const {
  return _internal_has_m();
}
inline void UAVIDResponse::clear_m() {
  _impl_.m_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UAVIDResponse::m() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDResponse.M)
  return _internal_m();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UAVIDResponse::set_m(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.m_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TAproto.UAVIDResponse.M)
}
inline std::string* UAVIDResponse::mutable_m() {
  std::string* _s = _internal_mutable_m();
  // @@protoc_insertion_point(field_mutable:TAproto.UAVIDResponse.M)
  return _s;
}
inline const std::string& UAVIDResponse::_internal_m() const {
  return _impl_.m_.Get();
}
inline void UAVIDResponse::_internal_set_m(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.m_.Set(value, GetArenaForAllocation());
}
inline std::string* UAVIDResponse::_internal_mutable_m() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.m_.Mutable(GetArenaForAllocation());
}
inline std::string* UAVIDResponse::release_m() {
  // @@protoc_insertion_point(field_release:TAproto.UAVIDResponse.M)
  if (!_internal_has_m()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.m_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_.IsDefault()) {
    _impl_.m_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UAVIDResponse::set_allocated_m(std::string* m) {
  if (m != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.m_.SetAllocated(m, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.m_.IsDefault()) {
    _impl_.m_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TAproto.UAVIDResponse.M)
}

// optional int32 t = 5;
inline bool UAVIDResponse::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UAVIDResponse::has_t() const {
  return _internal_has_t();
}
inline void UAVIDResponse::clear_t() {
  _impl_.t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t UAVIDResponse::_internal_t() const {
  return _impl_.t_;
}
inline int32_t UAVIDResponse::t() const {
  // @@protoc_insertion_point(field_get:TAproto.UAVIDResponse.t)
  return _internal_t();
}
inline void UAVIDResponse::_internal_set_t(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.t_ = value;
}
inline void UAVIDResponse::set_t(int32_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:TAproto.UAVIDResponse.t)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TAproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TA_2eproto

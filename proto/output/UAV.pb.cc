// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UAV.proto

#include "UAV.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace UAVproto {
PROTOBUF_CONSTEXPR SignRequest::SignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.m_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_)*/0} {}
struct SignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignRequestDefaultTypeInternal() {}
  union {
    SignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignRequestDefaultTypeInternal _SignRequest_default_instance_;
PROTOBUF_CONSTEXPR SignResponse::SignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cj_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sig_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignResponseDefaultTypeInternal() {}
  union {
    SignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignResponseDefaultTypeInternal _SignResponse_default_instance_;
}  // namespace UAVproto
static ::_pb::Metadata file_level_metadata_UAV_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_UAV_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_UAV_2eproto[1];

const uint32_t TableStruct_UAV_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignRequest, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignRequest, _impl_.t_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignResponse, _impl_.cj_),
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignResponse, _impl_.sig_),
  PROTOBUF_FIELD_OFFSET(::UAVproto::SignResponse, _impl_.id_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::UAVproto::SignRequest)},
  { 10, 19, -1, sizeof(::UAVproto::SignResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::UAVproto::_SignRequest_default_instance_._instance,
  &::UAVproto::_SignResponse_default_instance_._instance,
};

const char descriptor_table_protodef_UAV_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tUAV.proto\022\010UAVproto\"#\n\013SignRequest\022\t\n\001"
  "M\030\001 \002(\014\022\t\n\001t\030\002 \002(\005\"3\n\014SignResponse\022\n\n\002cj"
  "\030\001 \002(\014\022\013\n\003sig\030\002 \002(\014\022\n\n\002ID\030\003 \002(\0142D\n\013SignS"
  "ervice\0225\n\004sign\022\025.UAVproto.SignRequest\032\026."
  "UAVproto.SignResponseB\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_UAV_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UAV_2eproto = {
    false, false, 186, descriptor_table_protodef_UAV_2eproto,
    "UAV.proto",
    &descriptor_table_UAV_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_UAV_2eproto::offsets,
    file_level_metadata_UAV_2eproto, file_level_enum_descriptors_UAV_2eproto,
    file_level_service_descriptors_UAV_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UAV_2eproto_getter() {
  return &descriptor_table_UAV_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UAV_2eproto(&descriptor_table_UAV_2eproto);
namespace UAVproto {

// ===================================================================

class SignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SignRequest>()._impl_._has_bits_);
  static void set_has_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SignRequest::SignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UAVproto.SignRequest)
}
SignRequest::SignRequest(const SignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_){}
    , decltype(_impl_.t_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.m_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_m()) {
    _this->_impl_.m_.Set(from._internal_m(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.t_ = from._impl_.t_;
  // @@protoc_insertion_point(copy_constructor:UAVproto.SignRequest)
}

inline void SignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.m_){}
    , decltype(_impl_.t_){0}
  };
  _impl_.m_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.m_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignRequest::~SignRequest() {
  // @@protoc_insertion_point(destructor:UAVproto.SignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.m_.Destroy();
}

void SignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UAVproto.SignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.m_.ClearNonDefaultToEmpty();
  }
  _impl_.t_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes M = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_m();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAVproto.SignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes M = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_m(), target);
  }

  // required int32 t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAVproto.SignRequest)
  return target;
}

size_t SignRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAVproto.SignRequest)
  size_t total_size = 0;

  if (_internal_has_m()) {
    // required bytes M = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m());
  }

  if (_internal_has_t()) {
    // required int32 t = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t());
  }

  return total_size;
}
size_t SignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAVproto.SignRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes M = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_m());

    // required int32 t = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignRequest::GetClassData() const { return &_class_data_; }


void SignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignRequest*>(&to_msg);
  auto& from = static_cast<const SignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UAVproto.SignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_m(from._internal_m());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.t_ = from._impl_.t_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignRequest::CopyFrom(const SignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAVproto.SignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SignRequest::InternalSwap(SignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.m_, lhs_arena,
      &other->_impl_.m_, rhs_arena
  );
  swap(_impl_.t_, other->_impl_.t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UAV_2eproto_getter, &descriptor_table_UAV_2eproto_once,
      file_level_metadata_UAV_2eproto[0]);
}

// ===================================================================

class SignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SignResponse>()._impl_._has_bits_);
  static void set_has_cj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sig(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SignResponse::SignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UAVproto.SignResponse)
}
SignResponse::SignResponse(const SignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cj_){}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cj()) {
    _this->_impl_.cj_.Set(from._internal_cj(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sig()) {
    _this->_impl_.sig_.Set(from._internal_sig(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UAVproto.SignResponse)
}

inline void SignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cj_){}
    , decltype(_impl_.sig_){}
    , decltype(_impl_.id_){}
  };
  _impl_.cj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sig_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignResponse::~SignResponse() {
  // @@protoc_insertion_point(destructor:UAVproto.SignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cj_.Destroy();
  _impl_.sig_.Destroy();
  _impl_.id_.Destroy();
}

void SignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UAVproto.SignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cj_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes cj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cj();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes sig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes ID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UAVproto.SignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes cj = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cj(), target);
  }

  // required bytes sig = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sig(), target);
  }

  // required bytes ID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UAVproto.SignResponse)
  return target;
}

size_t SignResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:UAVproto.SignResponse)
  size_t total_size = 0;

  if (_internal_has_cj()) {
    // required bytes cj = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cj());
  }

  if (_internal_has_sig()) {
    // required bytes sig = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  if (_internal_has_id()) {
    // required bytes ID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  return total_size;
}
size_t SignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UAVproto.SignResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes cj = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cj());

    // required bytes sig = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());

    // required bytes ID = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignResponse::GetClassData() const { return &_class_data_; }


void SignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignResponse*>(&to_msg);
  auto& from = static_cast<const SignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UAVproto.SignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cj(from._internal_cj());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sig(from._internal_sig());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_id(from._internal_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignResponse::CopyFrom(const SignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UAVproto.SignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SignResponse::InternalSwap(SignResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cj_, lhs_arena,
      &other->_impl_.cj_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sig_, lhs_arena,
      &other->_impl_.sig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UAV_2eproto_getter, &descriptor_table_UAV_2eproto_once,
      file_level_metadata_UAV_2eproto[1]);
}

// ===================================================================

SignService::~SignService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SignService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UAV_2eproto);
  return file_level_service_descriptors_UAV_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* SignService::GetDescriptor() {
  return descriptor();
}

void SignService::sign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UAVproto::SignRequest*,
                         ::UAVproto::SignResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method sign() not implemented.");
  done->Run();
}

void SignService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_UAV_2eproto[0]);
  switch(method->index()) {
    case 0:
      sign(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UAVproto::SignRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UAVproto::SignResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SignService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UAVproto::SignRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& SignService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UAVproto::SignResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

SignService_Stub::SignService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SignService_Stub::SignService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
SignService_Stub::~SignService_Stub() {
  if (owns_channel_) delete channel_;
}

void SignService_Stub::sign(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UAVproto::SignRequest* request,
                              ::UAVproto::SignResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UAVproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UAVproto::SignRequest*
Arena::CreateMaybeMessage< ::UAVproto::SignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAVproto::SignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UAVproto::SignResponse*
Arena::CreateMaybeMessage< ::UAVproto::SignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UAVproto::SignResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

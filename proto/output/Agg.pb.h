// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Agg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Agg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Agg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Agg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Agg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Agg_2eproto;
namespace AGGproto {
class verifyRequest;
struct verifyRequestDefaultTypeInternal;
extern verifyRequestDefaultTypeInternal _verifyRequest_default_instance_;
class verifyResponse;
struct verifyResponseDefaultTypeInternal;
extern verifyResponseDefaultTypeInternal _verifyResponse_default_instance_;
}  // namespace AGGproto
PROTOBUF_NAMESPACE_OPEN
template<> ::AGGproto::verifyRequest* Arena::CreateMaybeMessage<::AGGproto::verifyRequest>(Arena*);
template<> ::AGGproto::verifyResponse* Arena::CreateMaybeMessage<::AGGproto::verifyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AGGproto {

// ===================================================================

class verifyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AGGproto.verifyRequest) */ {
 public:
  inline verifyRequest() : verifyRequest(nullptr) {}
  ~verifyRequest() override;
  explicit PROTOBUF_CONSTEXPR verifyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  verifyRequest(const verifyRequest& from);
  verifyRequest(verifyRequest&& from) noexcept
    : verifyRequest() {
    *this = ::std::move(from);
  }

  inline verifyRequest& operator=(const verifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline verifyRequest& operator=(verifyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const verifyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const verifyRequest* internal_default_instance() {
    return reinterpret_cast<const verifyRequest*>(
               &_verifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(verifyRequest& a, verifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(verifyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verifyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  verifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<verifyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const verifyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const verifyRequest& from) {
    verifyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verifyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AGGproto.verifyRequest";
  }
  protected:
  explicit verifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPKVFieldNumber = 1,
  };
  // optional bytes PK_v = 1;
  bool has_pk_v() const;
  private:
  bool _internal_has_pk_v() const;
  public:
  void clear_pk_v();
  const std::string& pk_v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pk_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pk_v();
  PROTOBUF_NODISCARD std::string* release_pk_v();
  void set_allocated_pk_v(std::string* pk_v);
  private:
  const std::string& _internal_pk_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pk_v(const std::string& value);
  std::string* _internal_mutable_pk_v();
  public:

  // @@protoc_insertion_point(class_scope:AGGproto.verifyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_v_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Agg_2eproto;
};
// -------------------------------------------------------------------

class verifyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AGGproto.verifyResponse) */ {
 public:
  inline verifyResponse() : verifyResponse(nullptr) {}
  ~verifyResponse() override;
  explicit PROTOBUF_CONSTEXPR verifyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  verifyResponse(const verifyResponse& from);
  verifyResponse(verifyResponse&& from) noexcept
    : verifyResponse() {
    *this = ::std::move(from);
  }

  inline verifyResponse& operator=(const verifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline verifyResponse& operator=(verifyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const verifyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const verifyResponse* internal_default_instance() {
    return reinterpret_cast<const verifyResponse*>(
               &_verifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(verifyResponse& a, verifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(verifyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verifyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  verifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<verifyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const verifyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const verifyResponse& from) {
    verifyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verifyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AGGproto.verifyResponse";
  }
  protected:
  explicit verifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuxsFieldNumber = 1,
    kSigsFieldNumber = 2,
    kIDsFieldNumber = 3,
  };
  // optional bytes auxs = 1;
  bool has_auxs() const;
  private:
  bool _internal_has_auxs() const;
  public:
  void clear_auxs();
  const std::string& auxs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auxs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auxs();
  PROTOBUF_NODISCARD std::string* release_auxs();
  void set_allocated_auxs(std::string* auxs);
  private:
  const std::string& _internal_auxs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auxs(const std::string& value);
  std::string* _internal_mutable_auxs();
  public:

  // optional bytes sigs = 2;
  bool has_sigs() const;
  private:
  bool _internal_has_sigs() const;
  public:
  void clear_sigs();
  const std::string& sigs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sigs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sigs();
  PROTOBUF_NODISCARD std::string* release_sigs();
  void set_allocated_sigs(std::string* sigs);
  private:
  const std::string& _internal_sigs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sigs(const std::string& value);
  std::string* _internal_mutable_sigs();
  public:

  // optional bytes IDs = 3;
  bool has_ids() const;
  private:
  bool _internal_has_ids() const;
  public:
  void clear_ids();
  const std::string& ids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ids();
  PROTOBUF_NODISCARD std::string* release_ids();
  void set_allocated_ids(std::string* ids);
  private:
  const std::string& _internal_ids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ids(const std::string& value);
  std::string* _internal_mutable_ids();
  public:

  // @@protoc_insertion_point(class_scope:AGGproto.verifyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auxs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sigs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ids_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Agg_2eproto;
};
// ===================================================================

class TranService_Stub;

class TranService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TranService() {};
 public:
  virtual ~TranService();

  typedef TranService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Tran(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AGGproto::verifyRequest* request,
                       ::AGGproto::verifyResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TranService);
};

class TranService_Stub : public TranService {
 public:
  TranService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  TranService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~TranService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements TranService ------------------------------------------

  void Tran(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AGGproto::verifyRequest* request,
                       ::AGGproto::verifyResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TranService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// verifyRequest

// optional bytes PK_v = 1;
inline bool verifyRequest::_internal_has_pk_v() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool verifyRequest::has_pk_v() const {
  return _internal_has_pk_v();
}
inline void verifyRequest::clear_pk_v() {
  _impl_.pk_v_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& verifyRequest::pk_v() const {
  // @@protoc_insertion_point(field_get:AGGproto.verifyRequest.PK_v)
  return _internal_pk_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verifyRequest::set_pk_v(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pk_v_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AGGproto.verifyRequest.PK_v)
}
inline std::string* verifyRequest::mutable_pk_v() {
  std::string* _s = _internal_mutable_pk_v();
  // @@protoc_insertion_point(field_mutable:AGGproto.verifyRequest.PK_v)
  return _s;
}
inline const std::string& verifyRequest::_internal_pk_v() const {
  return _impl_.pk_v_.Get();
}
inline void verifyRequest::_internal_set_pk_v(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pk_v_.Set(value, GetArenaForAllocation());
}
inline std::string* verifyRequest::_internal_mutable_pk_v() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pk_v_.Mutable(GetArenaForAllocation());
}
inline std::string* verifyRequest::release_pk_v() {
  // @@protoc_insertion_point(field_release:AGGproto.verifyRequest.PK_v)
  if (!_internal_has_pk_v()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pk_v_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_v_.IsDefault()) {
    _impl_.pk_v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verifyRequest::set_allocated_pk_v(std::string* pk_v) {
  if (pk_v != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pk_v_.SetAllocated(pk_v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pk_v_.IsDefault()) {
    _impl_.pk_v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AGGproto.verifyRequest.PK_v)
}

// -------------------------------------------------------------------

// verifyResponse

// optional bytes auxs = 1;
inline bool verifyResponse::_internal_has_auxs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool verifyResponse::has_auxs() const {
  return _internal_has_auxs();
}
inline void verifyResponse::clear_auxs() {
  _impl_.auxs_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& verifyResponse::auxs() const {
  // @@protoc_insertion_point(field_get:AGGproto.verifyResponse.auxs)
  return _internal_auxs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verifyResponse::set_auxs(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.auxs_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AGGproto.verifyResponse.auxs)
}
inline std::string* verifyResponse::mutable_auxs() {
  std::string* _s = _internal_mutable_auxs();
  // @@protoc_insertion_point(field_mutable:AGGproto.verifyResponse.auxs)
  return _s;
}
inline const std::string& verifyResponse::_internal_auxs() const {
  return _impl_.auxs_.Get();
}
inline void verifyResponse::_internal_set_auxs(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.auxs_.Set(value, GetArenaForAllocation());
}
inline std::string* verifyResponse::_internal_mutable_auxs() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.auxs_.Mutable(GetArenaForAllocation());
}
inline std::string* verifyResponse::release_auxs() {
  // @@protoc_insertion_point(field_release:AGGproto.verifyResponse.auxs)
  if (!_internal_has_auxs()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.auxs_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auxs_.IsDefault()) {
    _impl_.auxs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verifyResponse::set_allocated_auxs(std::string* auxs) {
  if (auxs != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.auxs_.SetAllocated(auxs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.auxs_.IsDefault()) {
    _impl_.auxs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AGGproto.verifyResponse.auxs)
}

// optional bytes sigs = 2;
inline bool verifyResponse::_internal_has_sigs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool verifyResponse::has_sigs() const {
  return _internal_has_sigs();
}
inline void verifyResponse::clear_sigs() {
  _impl_.sigs_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& verifyResponse::sigs() const {
  // @@protoc_insertion_point(field_get:AGGproto.verifyResponse.sigs)
  return _internal_sigs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verifyResponse::set_sigs(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sigs_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AGGproto.verifyResponse.sigs)
}
inline std::string* verifyResponse::mutable_sigs() {
  std::string* _s = _internal_mutable_sigs();
  // @@protoc_insertion_point(field_mutable:AGGproto.verifyResponse.sigs)
  return _s;
}
inline const std::string& verifyResponse::_internal_sigs() const {
  return _impl_.sigs_.Get();
}
inline void verifyResponse::_internal_set_sigs(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sigs_.Set(value, GetArenaForAllocation());
}
inline std::string* verifyResponse::_internal_mutable_sigs() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sigs_.Mutable(GetArenaForAllocation());
}
inline std::string* verifyResponse::release_sigs() {
  // @@protoc_insertion_point(field_release:AGGproto.verifyResponse.sigs)
  if (!_internal_has_sigs()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sigs_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sigs_.IsDefault()) {
    _impl_.sigs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verifyResponse::set_allocated_sigs(std::string* sigs) {
  if (sigs != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sigs_.SetAllocated(sigs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sigs_.IsDefault()) {
    _impl_.sigs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AGGproto.verifyResponse.sigs)
}

// optional bytes IDs = 3;
inline bool verifyResponse::_internal_has_ids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool verifyResponse::has_ids() const {
  return _internal_has_ids();
}
inline void verifyResponse::clear_ids() {
  _impl_.ids_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& verifyResponse::ids() const {
  // @@protoc_insertion_point(field_get:AGGproto.verifyResponse.IDs)
  return _internal_ids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void verifyResponse::set_ids(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AGGproto.verifyResponse.IDs)
}
inline std::string* verifyResponse::mutable_ids() {
  std::string* _s = _internal_mutable_ids();
  // @@protoc_insertion_point(field_mutable:AGGproto.verifyResponse.IDs)
  return _s;
}
inline const std::string& verifyResponse::_internal_ids() const {
  return _impl_.ids_.Get();
}
inline void verifyResponse::_internal_set_ids(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ids_.Set(value, GetArenaForAllocation());
}
inline std::string* verifyResponse::_internal_mutable_ids() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ids_.Mutable(GetArenaForAllocation());
}
inline std::string* verifyResponse::release_ids() {
  // @@protoc_insertion_point(field_release:AGGproto.verifyResponse.IDs)
  if (!_internal_has_ids()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ids_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ids_.IsDefault()) {
    _impl_.ids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void verifyResponse::set_allocated_ids(std::string* ids) {
  if (ids != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ids_.SetAllocated(ids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ids_.IsDefault()) {
    _impl_.ids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AGGproto.verifyResponse.IDs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AGGproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Agg_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Agg.proto

#include "Agg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace AGGproto {
PROTOBUF_CONSTEXPR verifyRequest::verifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pk_v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct verifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR verifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~verifyRequestDefaultTypeInternal() {}
  union {
    verifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 verifyRequestDefaultTypeInternal _verifyRequest_default_instance_;
PROTOBUF_CONSTEXPR verifyResponse::verifyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.auxs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sigs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ids_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct verifyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR verifyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~verifyResponseDefaultTypeInternal() {}
  union {
    verifyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 verifyResponseDefaultTypeInternal _verifyResponse_default_instance_;
}  // namespace AGGproto
static ::_pb::Metadata file_level_metadata_Agg_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Agg_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_Agg_2eproto[1];

const uint32_t TableStruct_Agg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyRequest, _impl_.pk_v_),
  0,
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyResponse, _impl_.auxs_),
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyResponse, _impl_.sigs_),
  PROTOBUF_FIELD_OFFSET(::AGGproto::verifyResponse, _impl_.ids_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::AGGproto::verifyRequest)},
  { 8, 17, -1, sizeof(::AGGproto::verifyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::AGGproto::_verifyRequest_default_instance_._instance,
  &::AGGproto::_verifyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_Agg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tAgg.proto\022\010AGGproto\"\035\n\rverifyRequest\022\014"
  "\n\004PK_v\030\001 \001(\014\"9\n\016verifyResponse\022\014\n\004auxs\030\001"
  " \001(\014\022\014\n\004sigs\030\002 \001(\014\022\013\n\003IDs\030\003 \001(\0142H\n\013TranS"
  "ervice\0229\n\004Tran\022\027.AGGproto.verifyRequest\032"
  "\030.AGGproto.verifyResponseB\003\200\001\001"
  ;
static ::_pbi::once_flag descriptor_table_Agg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Agg_2eproto = {
    false, false, 190, descriptor_table_protodef_Agg_2eproto,
    "Agg.proto",
    &descriptor_table_Agg_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Agg_2eproto::offsets,
    file_level_metadata_Agg_2eproto, file_level_enum_descriptors_Agg_2eproto,
    file_level_service_descriptors_Agg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Agg_2eproto_getter() {
  return &descriptor_table_Agg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Agg_2eproto(&descriptor_table_Agg_2eproto);
namespace AGGproto {

// ===================================================================

class verifyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<verifyRequest>()._impl_._has_bits_);
  static void set_has_pk_v(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

verifyRequest::verifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AGGproto.verifyRequest)
}
verifyRequest::verifyRequest(const verifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  verifyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pk_v_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pk_v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pk_v()) {
    _this->_impl_.pk_v_.Set(from._internal_pk_v(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AGGproto.verifyRequest)
}

inline void verifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pk_v_){}
  };
  _impl_.pk_v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pk_v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

verifyRequest::~verifyRequest() {
  // @@protoc_insertion_point(destructor:AGGproto.verifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void verifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pk_v_.Destroy();
}

void verifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void verifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AGGproto.verifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pk_v_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes PK_v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pk_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* verifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AGGproto.verifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes PK_v = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pk_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AGGproto.verifyRequest)
  return target;
}

size_t verifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AGGproto.verifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes PK_v = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pk_v());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData verifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    verifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*verifyRequest::GetClassData() const { return &_class_data_; }


void verifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<verifyRequest*>(&to_msg);
  auto& from = static_cast<const verifyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AGGproto.verifyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pk_v()) {
    _this->_internal_set_pk_v(from._internal_pk_v());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void verifyRequest::CopyFrom(const verifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AGGproto.verifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verifyRequest::IsInitialized() const {
  return true;
}

void verifyRequest::InternalSwap(verifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pk_v_, lhs_arena,
      &other->_impl_.pk_v_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata verifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Agg_2eproto_getter, &descriptor_table_Agg_2eproto_once,
      file_level_metadata_Agg_2eproto[0]);
}

// ===================================================================

class verifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<verifyResponse>()._impl_._has_bits_);
  static void set_has_auxs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sigs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

verifyResponse::verifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AGGproto.verifyResponse)
}
verifyResponse::verifyResponse(const verifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  verifyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.auxs_){}
    , decltype(_impl_.sigs_){}
    , decltype(_impl_.ids_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.auxs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auxs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auxs()) {
    _this->_impl_.auxs_.Set(from._internal_auxs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sigs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sigs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sigs()) {
    _this->_impl_.sigs_.Set(from._internal_sigs(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ids()) {
    _this->_impl_.ids_.Set(from._internal_ids(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AGGproto.verifyResponse)
}

inline void verifyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.auxs_){}
    , decltype(_impl_.sigs_){}
    , decltype(_impl_.ids_){}
  };
  _impl_.auxs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auxs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sigs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sigs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ids_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ids_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

verifyResponse::~verifyResponse() {
  // @@protoc_insertion_point(destructor:AGGproto.verifyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void verifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.auxs_.Destroy();
  _impl_.sigs_.Destroy();
  _impl_.ids_.Destroy();
}

void verifyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void verifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AGGproto.verifyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.auxs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sigs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ids_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verifyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes auxs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_auxs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sigs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sigs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes IDs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ids();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* verifyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AGGproto.verifyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes auxs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_auxs(), target);
  }

  // optional bytes sigs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sigs(), target);
  }

  // optional bytes IDs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AGGproto.verifyResponse)
  return target;
}

size_t verifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AGGproto.verifyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes auxs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_auxs());
    }

    // optional bytes sigs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sigs());
    }

    // optional bytes IDs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ids());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData verifyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    verifyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*verifyResponse::GetClassData() const { return &_class_data_; }


void verifyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<verifyResponse*>(&to_msg);
  auto& from = static_cast<const verifyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AGGproto.verifyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_auxs(from._internal_auxs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sigs(from._internal_sigs());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ids(from._internal_ids());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void verifyResponse::CopyFrom(const verifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AGGproto.verifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verifyResponse::IsInitialized() const {
  return true;
}

void verifyResponse::InternalSwap(verifyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auxs_, lhs_arena,
      &other->_impl_.auxs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sigs_, lhs_arena,
      &other->_impl_.sigs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ids_, lhs_arena,
      &other->_impl_.ids_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata verifyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Agg_2eproto_getter, &descriptor_table_Agg_2eproto_once,
      file_level_metadata_Agg_2eproto[1]);
}

// ===================================================================

TranService::~TranService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TranService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Agg_2eproto);
  return file_level_service_descriptors_Agg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TranService::GetDescriptor() {
  return descriptor();
}

void TranService::Tran(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::AGGproto::verifyRequest*,
                         ::AGGproto::verifyResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Tran() not implemented.");
  done->Run();
}

void TranService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Agg_2eproto[0]);
  switch(method->index()) {
    case 0:
      Tran(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::AGGproto::verifyRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AGGproto::verifyResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TranService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AGGproto::verifyRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TranService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::AGGproto::verifyResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TranService_Stub::TranService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TranService_Stub::TranService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TranService_Stub::~TranService_Stub() {
  if (owns_channel_) delete channel_;
}

void TranService_Stub::Tran(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::AGGproto::verifyRequest* request,
                              ::AGGproto::verifyResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace AGGproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AGGproto::verifyRequest*
Arena::CreateMaybeMessage< ::AGGproto::verifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AGGproto::verifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AGGproto::verifyResponse*
Arena::CreateMaybeMessage< ::AGGproto::verifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AGGproto::verifyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
